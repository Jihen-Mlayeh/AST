package partie3_tp2_partie1.spoon;

import java.util.List;
import java.util.Locale;
import java.util.Scanner;

/**
 * Point d'entr√©e principal pour l'Exercice 3
 * Comparaison entre l'approche manuelle et l'approche Spoon
 */
public class MainSpoonAnalysis {

    public static void main(String[] args) {
    	Scanner scanner = new Scanner(System.in);
    	scanner.useLocale(Locale.US); // Force le point comme s√©parateur d√©cimal

        
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë  EXERCICE 3 : Analyse de Code avec SPOON                  ‚ïë");
        System.out.println("‚ïë  Identification de Modules via Clustering Hi√©rarchique    ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

        // Configuration
        String projectPath = "C:\\Users\\Jihen\\eclipse-workspace\\ProjectTest2";
        double CP = 0.1; // Seuil de couplage
        
        System.out.println("üìÅ Projet √† analyser : " + projectPath);
        System.out.println("üéØ Seuil de couplage (CP) : " + CP);
        System.out.println();
        
        // Menu interactif
        boolean running = true;
        while (running) {
            System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            System.out.println("‚ïë          MENU PRINCIPAL           ‚ïë");
            System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            System.out.println("1. üìä Exercice 1 : Graphe d'appel avec Spoon");
            System.out.println("2. üîó Exercice 1 : Calcul du couplage avec Spoon");
            System.out.println("3. üì¶ Exercice 2 : Identification de modules avec Spoon");
            System.out.println("4. üñºÔ∏è  Exercice 2 : Visualisation des modules (GUI)");
            System.out.println("5. üöÄ Ex√©cuter tout (Analyse compl√®te)");
            System.out.println("6. ‚öôÔ∏è  Changer le seuil CP");
            System.out.println("0. ‚ùå Quitter");
            System.out.print("\n‚û§ Votre choix : ");
            
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consommer le retour √† la ligne
            
            switch (choice) {
                case 1:
                    exercice1GrapheAppel(projectPath);
                    break;
                    
                case 2:
                    exercice1Couplage(projectPath);
                    break;
                    
                case 3:
                    exercice2Modules(projectPath, CP);
                    break;
                    
                case 4:
                    exercice2Visualisation(projectPath, CP);
                    break;
                    
                case 5:
                    analyseComplete(projectPath, CP);
                    break;
                    
                case 6:
                    System.out.print("\nüéØ Nouveau seuil CP (ex: 0.1) : ");
                    CP = scanner.nextDouble();
                    System.out.println("‚úÖ Seuil CP mis √† jour : " + CP);
                    break;
                    
                case 0:
                    running = false;
                    System.out.println("\nüëã Au revoir !");
                    break;
                    
                default:
                    System.out.println("\n‚ùå Choix invalide !");
            }
        }
        
        scanner.close();
    }

    /**
     * Exercice 1 : Analyse du graphe d'appel
     */
    private static void exercice1GrapheAppel(String projectPath) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("  EXERCICE 1 : GRAPHE D'APPEL AVEC SPOON");
        System.out.println("=".repeat(60));
        
        SpoonCallGraphAnalyzer analyzer = new SpoonCallGraphAnalyzer(projectPath);
        analyzer.analyze();
    }

    /**
     * Exercice 1 : Calcul du couplage
     */
    private static void exercice1Couplage(String projectPath) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("  EXERCICE 1 : CALCUL DU COUPLAGE AVEC SPOON");
        System.out.println("=".repeat(60));
        
        SpoonCallGraphAnalyzer analyzer = new SpoonCallGraphAnalyzer(projectPath);
        analyzer.analyze();
        
        SpoonCouplingCalculator calc = new SpoonCouplingCalculator(analyzer);
        
        System.out.println("\nüìä Matrice de couplage compl√®te :");
        System.out.println("-".repeat(60));
        
        calc.getCouplingMatrix().entrySet().stream()
            .sorted((e1, e2) -> Double.compare(e2.getValue(), e1.getValue()))
            .forEach(entry -> {
                System.out.println(String.format("  %-40s : %.4f", 
                    entry.getKey(), entry.getValue()));
            });
    }

    /**
     * Exercice 2 : Identification des modules
     */
    private static void exercice2Modules(String projectPath, double CP) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("  EXERCICE 2 : IDENTIFICATION DE MODULES AVEC SPOON");
        System.out.println("=".repeat(60));
        
        SpoonCallGraphAnalyzer analyzer = new SpoonCallGraphAnalyzer(projectPath);
        analyzer.analyze();
        
        SpoonCouplingCalculator calc = new SpoonCouplingCalculator(analyzer);
        
        SpoonModuleIdentifier identifier = new SpoonModuleIdentifier(calc, CP);
        List<List<String>> modules = identifier.identifyModules();
        
        System.out.println("\n" + "=".repeat(60));
        System.out.println("  R√âSULTAT : MODULES IDENTIFI√âS");
        System.out.println("=".repeat(60) + "\n");
        
        int i = 1;
        for (List<String> module : modules) {
            System.out.println("üì¶ Module " + i + " (" + module.size() + " classe(s)) :");
            for (String className : module) {
                System.out.println("   ‚Ä¢ " + className);
            }
            System.out.println();
            i++;
        }
    }

    /**
     * Exercice 2 : Visualisation graphique
     */
    private static void exercice2Visualisation(String projectPath, double CP) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("  EXERCICE 2 : VISUALISATION DES MODULES");
        System.out.println("=".repeat(60));
        
        SpoonCallGraphAnalyzer analyzer = new SpoonCallGraphAnalyzer(projectPath);
        analyzer.analyze();
        
        SpoonCouplingCalculator calc = new SpoonCouplingCalculator(analyzer);
        
        SpoonModuleIdentifier identifier = new SpoonModuleIdentifier(calc, CP);
        List<List<String>> modules = identifier.identifyModules();
        
        System.out.println("\nüñ•Ô∏è Ouverture de l'interface graphique...");
        SpoonModuleVisualizer.showModules(modules);
    }

    /**
     * Analyse compl√®te : tous les exercices en une fois
     */
    private static void analyseComplete(String projectPath, double CP) {
        System.out.println("\n" + "‚ïî" + "‚ïê".repeat(58) + "‚ïó");
        System.out.println("‚ïë" + " ".repeat(15) + "ANALYSE COMPL√àTE AVEC SPOON" + " ".repeat(16) + "‚ïë");
        System.out.println("‚ïö" + "‚ïê".repeat(58) + "‚ïù\n");
        
        // √âtape 1 : Graphe d'appel
        System.out.println("‚ñ∂ √âtape 1/3 : Analyse du graphe d'appel...");
        SpoonCallGraphAnalyzer analyzer = new SpoonCallGraphAnalyzer(projectPath);
        analyzer.analyze();
        
        // √âtape 2 : Couplage
        System.out.println("\n‚ñ∂ √âtape 2/3 : Calcul du couplage...");
        SpoonCouplingCalculator calc = new SpoonCouplingCalculator(analyzer);
        
        // √âtape 3 : Modules
        System.out.println("\n‚ñ∂ √âtape 3/3 : Identification des modules...");
        SpoonModuleIdentifier identifier = new SpoonModuleIdentifier(calc, CP);
        List<List<String>> modules = identifier.identifyModules();
        
        // R√©sum√© final
        System.out.println("\n" + "‚ïî" + "‚ïê".repeat(58) + "‚ïó");
        System.out.println("‚ïë" + " ".repeat(20) + "R√âSUM√â FINAL" + " ".repeat(26) + "‚ïë");
        System.out.println("‚ïö" + "‚ïê".repeat(58) + "‚ïù\n");
        
        System.out.println("‚úÖ Classes analys√©es : " + calc.getAllClasses().size());
        System.out.println("‚úÖ Relations inter-classes : " + calc.getTotalRelations());
        System.out.println("‚úÖ Modules identifi√©s : " + modules.size());
        System.out.println("‚úÖ Seuil CP utilis√© : " + CP);
        
        System.out.println("\nüì¶ Modules d√©taill√©s :");
        int i = 1;
        for (List<String> module : modules) {
            System.out.println("  Module " + i + " : " + module);
            i++;
        }
        
        // Ouvrir l'interface graphique
        System.out.println("\nüñ•Ô∏è Ouverture de l'interface graphique...");
        SpoonModuleVisualizer.showModules(modules);
    }
}